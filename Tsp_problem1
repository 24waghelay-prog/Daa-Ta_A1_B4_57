def calculate_distance(path, matrix):
    distance = 0
    for i in range(len(path)):
        next_i = 0 if i == len(path) - 1 else i + 1
        distance += matrix[path[i]][path[next_i]]
    return distance
def tsp(current, visited, cities, matrix, path, best_path, best_distance):
    if len(path) == len(cities):
        distance = calculate_distance(path, matrix)
        if distance < best_distance[0]:
            best_distance[0] = distance
            best_path[0] = path[:]
        return
    for i in range(len(cities)):
        if not visited[i]:
            visited[i] = True
            path.append(i)
            tsp(i, visited, cities, matrix, path, best_path, best_distance)
            visited[i] = False
            path.pop()
cities = ['A', 'B', 'C', 'D']
matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]
best_path = [[]]
best_distance = [float('inf')]
visited = [False] * len(cities)
visited[0] = True
tsp(0, visited, cities, matrix, [0], best_path, best_distance)

route = " â†’ ".join(cities[i] for i in best_path[0])
print("Shortest Route:", route)
print("Total Distance:", best_distance[0])
